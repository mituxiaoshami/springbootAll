Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。

Redis优点:
1、读写性能优异 – Redis能读的速度是110000次/s,写的速度是81000次/s 。
2、原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行(类似于事务)。
3、支持数据持久化，支持AOF和RDB两种持久化方式
4、支持主从复制，主机会自动将数据同步到从机，可以进行读写分离
5、数据结构丰富：除了支持string类型的value外还支持string、hash、set、sortedset、list等数据结构

Redis缺点:
1、Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复。
2、主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性。
3、redis的主从复制采用全量复制，复制过程中主机会fork出一个子进程对内存做一份快照，并将子进程的内存快照保存为文件发送给从机，这一过程需要确保主机有足够多的空余内存。若快照文件较大，对集群的服务能力会产生较大的影响，而且复制过程是在从机新加入集群或者从机和主机网络断开重连时都会进行，也就是网络波动都会造成主机和从机间的一次全量的数据复制，这对实际的系统运营造成了不小的麻烦。
4、Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。

如何选择AOF和RDB两种持久化方式?
官方的建议是两个同时使用。这样可以提供更可靠的持久化方案。

redis持久化----RDB
RDB方式，是将redis某一时刻的数据持久化到磁盘中，是一种快照式的持久化方法。

持久化过程:
Redis在进行数据持久化的过程中，会先将数据写入到一个临时文件中，待持久化过程都结束了，才会用这个临时文件替换上次持久化好的文件。正是这种特性，让我们可以随时来进行备份，因为快照文件总是完整可用的。
对于RDB方式，redis会单独创建（fork）一个子进程来进行持久化，而主进程是不会进行任何IO操作的，这样就确保了redis极高的性能

如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。

RDB缺点:
虽然RDB有不少优点，但它的缺点也是不容忽视的。如果你对数据的完整性非常敏感，那么RDB方式就不太适合你，因为即使你每5分钟都持久化一次，当redis故障时，仍然会有近5分钟的数据丢失。所以，redis还提供了另一种持久化方式，那就是AOF。


redis持久化----AOF
AOF，英文是Append Only File，即只允许追加不允许改写的文件。
AOF方式是将执行过的写指令记录下来，在数据恢复时按照从前到后的顺序再将指令都执行一遍，就这么简单。

怎么配置?
配置redis.conf中的appendonly yes就可以打开AOF功能。

如果有写操作(如SET等),redis就会被追加到AOF文件的末尾

默认的AOF持久化策略:
默认的AOF持久化策略是每秒钟fsync一次（fsync是指把缓存中的写指令记录到磁盘中），因为在这种情况下，redis仍然可以保持很好的处理性能，即使redis故障，也只会丢失最近1秒钟的数据。

磁盘空间满的情况下怎么办:
在追加日志时，恰好遇到磁盘空间满、inode满或断电等情况导致日志写入不完整，也没有关系，redis提供了redis-check-aof工具，可以用来进行日志修复。

因为采用追加的方式，不做处理的话AOF文件会变得越来越大,此时，该怎么做？
redis提供了AOF文件重写(rewrite)机制，当AOF文件的大小超过所设定的阈值时，redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集。
例子:我们调用了100次INCR指令，在AOF文件中就要存储100条指令，但这明显是很低效的，完全可以把这100条指令合并成一条SET指令，这就是重写机制的原理。
在进行AOF重写时，仍然是采用先写临时文件，全部完成后再替换的流程，所以断电、磁盘满等问题都不会影响AOF文件的可用性。


AOF另外一个好处:
在操作redis时，不小心执行了FLUSHALL，导致redis内存中的数据全部被清空了,此时只要redis配置了AOF持久化方式，且AOF文件还没有被重写（rewrite），我们就可以用最快的速度暂停redis并编辑AOF文件，将最后一行的FLUSHALL命令删除，然后重启redis，就可以恢复redis的所有数据到FLUSHALL之前的状态了。是不是很神奇，这就是AOF持久化方式的好处之一。但是如果AOF文件已经被重写了，那就无法通过这种方法来恢复数据了。

如果AOF文件出现了被写坏的情况，也不必过分担忧，redis并不会贸然加载这个有问题的AOF文件，而是报错退出。这时可以通过以下步骤来修复出错的文件：
1、备份被写坏的AOF文件
2、运行redis-check-aof –fix进行修复
3、用diff -u来看下两个文件的差异，确认问题点
4、重启redis，加载修复后的AOF文件

AOF重写的内部原理:
在重写即将开始之际，redis会创建（fork）一个“重写子进程”，这个子进程会首先读取现有的AOF文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。
与此同时，主工作进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的AOF文件中，这样做是保证原有的AOF文件的可用性，避免在重写过程中出现意外。
当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新AOF文件中。
当追加结束后，redis就会用新AOF文件来代替旧AOF文件，之后再有新的写指令，就都会追加到新的AOF文件中了。

Redis的事务处理:
1、MULTI用来组装一个事务；
2、EXEC用来执行一个事务；
3、DISCARD用来取消一个事务；
4、WATCH用来监视一些key，一旦这些key在事务执行之前被改变，则取消事务的执行。



java和redis的结合:

redis一个优点就是可以将数据写入到磁盘中。
写入磁盘的数据实际上都是以字节(0101这样的二进制数据)的形式写入的。
------------所以我们要将一个对象写入磁盘，就必须将这个对象序列化。

java的反序列是否成功跟serialVersionUID有很大的关系，自动生成的UID在每次编译时就会发生变化。
如果有两个程序共享一个redis，这个时候反序列化就会出现问题
所以需要自定义个redis序列化工具.

1、为什么Spring redis中缓存的对象需要实现Serializable序列化接口?
查看RedisTemplate源码，我们可以看到，在RedisTemplate中针对不同类型的数据提供了不同的序列化方式，而默认的序列化方式为JdkSerializationRedisSerializer

RedisTemplate部分源码:

private RedisSerializer<?> defaultSerializer;

public void afterPropertiesSet() {
        super.afterPropertiesSet();
        boolean defaultUsed = false;
        if(this.defaultSerializer == null) {
            this.defaultSerializer = new JdkSerializationRedisSerializer(this.classLoader != null?this.classLoader:this.getClass().getClassLoader());
        }
        .......
}

//在afterPropertiesSet()方法中，判断如果defaultSerializer为空，就默认使用的序列化方式为JdkSerializationRedisSerializer

而常用的配置为键采用StringRedisSerializer来序列化，value采用默认的JdkSerializationSerializer。

首先来看一下这两个类的源码:

StringRedisSerializer:

public class StringRedisSerializer implements RedisSerializer<String> {
    private final Charset charset;

    public StringRedisSerializer() {
        this(Charset.forName("UTF8"));
    }

    public StringRedisSerializer(Charset charset) {
        Assert.notNull(charset, "Charset must not be null!");
        this.charset = charset;
    }

    public String deserialize(byte[] bytes) {
        return bytes == null?null:new String(bytes, this.charset);
    }

    public byte[] serialize(String string) {
        return string == null?null:string.getBytes(this.charset);
    }
}


序列化方法就是直接将String转换为byte，反序列化就是直接将byte转化为String，这里是不涉及serialVersionUID的（没有要求类必须实现Serializable接口）。


JdkSerializationSerializer:

public class JdkSerializationRedisSerializer implements RedisSerializer<Object> {
    private final Converter<Object, byte[]> serializer;
    private final Converter<byte[], Object> deserializer;

    public JdkSerializationRedisSerializer() {
        this(new SerializingConverter(), new DeserializingConverter());
    }

    public JdkSerializationRedisSerializer(ClassLoader classLoader) {
        this(new SerializingConverter(), new DeserializingConverter(classLoader));
    }

    public JdkSerializationRedisSerializer(Converter<Object, byte[]> serializer, Converter<byte[], Object> deserializer) {
        Assert.notNull(serializer, "Serializer must not be null!");
        Assert.notNull(deserializer, "Deserializer must not be null!");
        this.serializer = serializer;
        this.deserializer = deserializer;
    }

    public Object deserialize(byte[] bytes) {
        if(SerializationUtils.isEmpty(bytes)) {
            return null;
        } else {
            try {
                return this.deserializer.convert(bytes);
            } catch (Exception var3) {
                throw new SerializationException("Cannot deserialize", var3);
            }
        }
    }

    public byte[] serialize(Object object) {
        if(object == null) {
            return SerializationUtils.EMPTY_ARRAY;
        } else {
            try {
                return (byte[])this.serializer.convert(object);
            } catch (Exception var3) {
                throw new SerializationException("Cannot serialize", var3);
            }
        }
    }
}

序列化的时候调用了serializer.convert方法。

convert方法:

     public byte[] convert(Object source) {
        ByteArrayOutputStream byteStream = new ByteArrayOutputStream(256);
        try  {
            this.serializer.serialize(source, byteStream);
            return byteStream.toByteArray();
        }
        catch (Throwable ex) {
            throw new SerializationFailedException("Failed to serialize object using " +
                    this.serializer.getClass().getSimpleName(), ex);
        }
    }

默认情况下，this.serializer.serialize(source, byteStream)调用的是 DefaultSerializer 下的serialize方法。

     public class DefaultSerializer implements Serializer<Object> {

    /**
     * Writes the source object to an output stream using Java Serialization.
     * The source object must implement {@link Serializable}.
     */
    public void serialize(Object object, OutputStream outputStream) throws IOException {
        if (!(object instanceof Serializable)) {
            throw new IllegalArgumentException(getClass().getSimpleName() + " requires a Serializable payload " +
                    "but received an object of type [" + object.getClass().getName() + "]");
        }
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);
        objectOutputStream.writeObject(object);
        objectOutputStream.flush();
    }

    }


从上面的代码可以看到DefaultSerializer下的serialize方法对Object对象的序列化是使用ObjectOutputStream将对象导入到outputStream中的。

而查看ObjectOutputStream的API，可以看出只有支持java.io.Serializable序列化接口的对象才能使用ObjectOutputStream



