由于项目要用到Redis，而Redis是可以将数据写入到磁盘中，Java对象就必须实现序列化，这样才能以二进制的方式存储到磁盘中

所以讲讲Java序列化和反序列化:

为什么要序列化和反序列化?
序列化的过程就是对象写入字节流和从字节流中读取对象。
将对象状态转换成字节流之后，可以用java.io包中的各种字节流类将其保存到文件中，
管道到另一线程中或通过网络连接将对象数据发送到另一主机。
采用数据流来存储 ,以数据流传输会提高网络传输速度，在数据流进行操作可以直接操作数据流，少了对数据表进行操作的过程，减少数据出错的几率.

或者可以这样解释:
当两个进程在进行远程通信时，可以相互发送各种类型的数据，包括文本、图片、音频、视频等，而这些数据都会以二进制的形式在网络上传送。那么当两个Java进程进行通信时，
进程间的对象传送，就用到了序列化和反序列化。
一方面:发送方需要把这个Java对象转换为字节序列，然后在网络上传送；另一方面:接收方需要从字节序列中恢复出Java对象。

好处:1、实现了数据的持久化，通过序列化可以把数据永久地保存到硬盘上(通常放在文件里)
     2、利用序列化实现远程通信，即在网络上传送对象的字节序列

序列化概念:
序列化:将java对象转化为字节序列的过程。
反序列化:将字节序列转化为java对象的过程。

应用场景:
对象序列化可以实现分布式对象。
例:现在做一个项目，项目是分工合作的，并且你和其他小组成员不在同一个城市，
那么你要如何把你写的那些类给其他小组成员呢？这个时候就要用到序列化了，
简单的说：序列化就是将内存中的类或者对象（你写的类都是存储在内存中的）变成可以存储到存储媒介中的流，
你将类序列化成流之后可以通过互联网传输给别人，你也可以反序列化将别人的序列化流转换成内存中的对象。


涉及到的API:
java.io.ObjectOutputStream表示对象输出流，
它的writeObject(Object obj)方法可以对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。

java.io.ObjectInputStream表示对象输入流，
它的readObject()方法源输入流中读取字节序列，再把它们反序列化成为一个对象，并将其返回。

只有实现了Serializable或Externalizable接口的类的对象才能被序列化，否则抛出异常。

例子:

1、首先写个实体类Person并且实现Serializable接口
import java.io.Serializable;

/**
 * Person实体类 用来测试序列化
 */
public class Person implements Serializable  {

    private int age;
    private String name;
    //序列化ID
    private static final long serialVersionUID = -5809782578272943999L;

    public Person() {}

    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        this.age = age;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }

}

2、在main()里面写个方法，执行序列化过程:
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
/**
 * 测试序列化和反序列化
 */
public class ObjSerializeAndDeserializeTest {
    public static void main(String[] args) {

        //将Person对象序列化
        SerializePerson();
        //反序列化生成Person对象
        Person person=DeserializePerson();
        System.out.println("name :"+person.getName());
        System.out.println("age  :"+person.getAge());
    }

    /**
     * @Title: 序列化Person对象，将其存储到 E:/hello.txt文件中
     * @param
     * @return void
     * @throws
     */
    private static void SerializePerson() {
        Person person =new Person();
        person.setAge(30);
        person.setName("SerializePerson");
        ObjectOutputStream outputStream = null;
        try {
            outputStream=new ObjectOutputStream(new FileOutputStream("E:/hello.txt"));
            outputStream.writeObject(person);
            System.out.println("序列化成功。");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                outputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
         * 执行反序列化过程生产Person对象
         * @Title: DeserializePerson
         * @param @return
         * @return Person
         * @throws
         */
        private static Person DeserializePerson() {

            Person person=null;
            ObjectInputStream inputStream=null;
            try {
                inputStream=new ObjectInputStream(new FileInputStream("E:/hello.txt"));
                try {
                    person=(Person)inputStream.readObject();
                    System.out.println("执行反序列化过程成功。");
                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    inputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return person;
        }
}


