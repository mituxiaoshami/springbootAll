# Log 配置
# path为本机的log地址
logging.path=e:/log/springbootAll
# logging.level 后面可以根据包路径配置不同资源的log级别
logging.level.com.example.springbootAll = DEBUG
logging.level.org.springframework.web = INFO
logging.level.org.hibernate = ERROR

# 数据库配置信息 (主数据源,默认的)
spring.datasource.primary.url = jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false&serverTimezone=UTC
spring.datasource.primary.username = root
spring.datasource.primary.password = root
spring.datasource.primary.driver-class-name = com.mysql.cj.jdbc.Driver

# 数据库配置信息 (主数据源,默认的)
spring.datasource.secondary.url = jdbc:mysql://localhost:3306/test1?characterEncoding=utf8&useSSL=false&serverTimezone=UTC
spring.datasource.secondary.username = root
spring.datasource.secondary.password = root
spring.datasource.secondary.driver-class-name = com.mysql.cj.jdbc.Driver

# 下面为连接池的补充设置，应用到上面所有数据源中
spring.datasource.tomcat.max-active = 20
spring.datasource.tomcat.max-idle = 8
spring.datasource.max-wait = 10000
spring.datasource.tomcat.min-idle = 8
spring.datasource.tomcat.initial-size = 10

# hibernate.hbm2ddl.auto参数的作用主要用于：自动创建|更新|验证数据库表结构
# create: 每次加载hibernate时都会删除上一次的生成的表，
# 然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因

# create-drop: 每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除

# update: (最常用的属性)第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），
# 以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。
# 要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会

# validate: 每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值
spring.jpa.properties.hibernate.hbm2ddl.auto = update
# dialect 主要是指定生成表名的存储引擎为InneoDB
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL57InnoDBDialect
# 是否打印出自动生产的SQL，方便调试的时候查看。
spring.jpa.show-sql = true


# Redis配置
# Redis数据库索引（默认为0）
spring.redis.database = 0
# Redis服务器地址(远程调用redis服务器时,需要指定redis服务器的ip和端口，并在redis的config中做相应处理，允许外来ip访问)
spring.redis.host = 192.168.79.128
# Redis服务器连接端口
spring.redis.port = 6379
# Redis服务器连接密码（默认为空）
spring.redis.password =
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active = 8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait = -1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle = 8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle = 0
# 连接超时时间（毫秒）
spring.redis.timeout = 0